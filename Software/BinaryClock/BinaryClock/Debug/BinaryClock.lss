
BinaryClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  008001a0  008001a0  0000095c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e8a  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c07  00000000  00000000  0000297e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bff  00000000  00000000  00003585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00004184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cc  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d9  00000000  00000000  00004a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005b2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 3a       	cpi	r26, 0xA0	; 160
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 ea       	ldi	r26, 0xA0	; 160
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3b       	cpi	r26, 0xB2	; 178
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  9e:	0c 94 12 04 	jmp	0x824	; 0x824 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <shiftRegisterLCD>:
void LCD_DisplayChar(unsigned char location,unsigned char pos){
	 lcd4BitIns(pos);
	 _delay_us(80);
	 lcd4Bitdata(location);

}
  a6:	5b 98       	cbi	0x0b, 3	; 11
  a8:	28 98       	cbi	0x05, 0	; 5
  aa:	27 e0       	ldi	r18, 0x07	; 7
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	ac 01       	movw	r20, r24
  b0:	02 2e       	mov	r0, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <shiftRegisterLCD+0x12>
  b4:	55 95       	asr	r21
  b6:	47 95       	ror	r20
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <shiftRegisterLCD+0xe>
  bc:	40 ff       	sbrs	r20, 0
  be:	05 c0       	rjmp	.+10     	; 0xca <shiftRegisterLCD+0x24>
  c0:	26 30       	cpi	r18, 0x06	; 6
  c2:	31 05       	cpc	r19, r1
  c4:	14 f4       	brge	.+4      	; 0xca <shiftRegisterLCD+0x24>
  c6:	5a 9a       	sbi	0x0b, 2	; 11
  c8:	01 c0       	rjmp	.+2      	; 0xcc <shiftRegisterLCD+0x26>
  ca:	5a 98       	cbi	0x0b, 2	; 11
  cc:	5b 9a       	sbi	0x0b, 3	; 11
  ce:	5b 98       	cbi	0x0b, 3	; 11
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	31 09       	sbc	r19, r1
  d4:	60 f7       	brcc	.-40     	; 0xae <shiftRegisterLCD+0x8>
  d6:	28 9a       	sbi	0x05, 0	; 5
  d8:	08 95       	ret

000000da <Write4bit>:
  da:	87 ff       	sbrs	r24, 7
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <Write4bit+0x18>
  de:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
  e2:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
  e6:	20 62       	ori	r18, 0x20	; 32
  e8:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
  ec:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
  f0:	09 c0       	rjmp	.+18     	; 0x104 <Write4bit+0x2a>
  f2:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
  f6:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
  fa:	2f 7d       	andi	r18, 0xDF	; 223
  fc:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 100:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 104:	86 ff       	sbrs	r24, 6
 106:	0a c0       	rjmp	.+20     	; 0x11c <Write4bit+0x42>
 108:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 10c:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
 110:	20 61       	ori	r18, 0x10	; 16
 112:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 116:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 11a:	09 c0       	rjmp	.+18     	; 0x12e <Write4bit+0x54>
 11c:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 120:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
 124:	2f 7e       	andi	r18, 0xEF	; 239
 126:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 12a:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 12e:	85 ff       	sbrs	r24, 5
 130:	0a c0       	rjmp	.+20     	; 0x146 <Write4bit+0x6c>
 132:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 136:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
 13a:	28 60       	ori	r18, 0x08	; 8
 13c:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 140:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 144:	09 c0       	rjmp	.+18     	; 0x158 <Write4bit+0x7e>
 146:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <__data_end>
 14a:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <__data_end+0x1>
 14e:	27 7f       	andi	r18, 0xF7	; 247
 150:	30 93 a1 01 	sts	0x01A1, r19	; 0x8001a1 <__data_end+0x1>
 154:	20 93 a0 01 	sts	0x01A0, r18	; 0x8001a0 <__data_end>
 158:	84 ff       	sbrs	r24, 4
 15a:	0a c0       	rjmp	.+20     	; 0x170 <Write4bit+0x96>
 15c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 160:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 164:	84 60       	ori	r24, 0x04	; 4
 166:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 16a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
 16e:	09 c0       	rjmp	.+18     	; 0x182 <Write4bit+0xa8>
 170:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 174:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 178:	8b 7f       	andi	r24, 0xFB	; 251
 17a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 17e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
 182:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 186:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 190:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
 194:	0e 94 53 00 	call	0xa6	; 0xa6 <shiftRegisterLCD>
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <Write4bit+0xc0>
 19e:	00 00       	nop
 1a0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 1a4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 1ae:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <shiftRegisterLCD>
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <Write4bit+0xde>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <lcd4BitIns>:
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ec 01       	movw	r28, r24
 1c6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 1ca:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <shiftRegisterLCD>
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
 1dc:	ce 01       	movw	r24, r28
 1de:	82 95       	swap	r24
 1e0:	92 95       	swap	r25
 1e2:	90 7f       	andi	r25, 0xF0	; 240
 1e4:	98 27       	eor	r25, r24
 1e6:	80 7f       	andi	r24, 0xF0	; 240
 1e8:	98 27       	eor	r25, r24
 1ea:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <lcd4Bit_Init>:
		lcd4Bitdata(str[i]);
	}
}

void lcd4Bit_Init(){
	data = 0;
 1f4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <__data_end+0x1>
 1f8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <__data_end>
	LCD_DDR_PORTB |= LCD_PORTB_MASK;
 1fc:	20 9a       	sbi	0x04, 0	; 4
	LCD_DDR_PORTD |= LCD_PORTD_MASK;
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	8c 60       	ori	r24, 0x0C	; 12
 202:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	81 ee       	ldi	r24, 0xE1	; 225
 208:	94 e0       	ldi	r25, 0x04	; 4
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <lcd4Bit_Init+0x16>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd4Bit_Init+0x20>
 214:	00 00       	nop
	_delay_ms(100);
	data &= ~(1 << RS);
	data &= ~(1 << EN);
 216:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <__data_end>
 21a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <__data_end+0x1>
 21e:	8c 7f       	andi	r24, 0xFC	; 252
 220:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <__data_end+0x1>
 224:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <__data_end>
	shiftRegisterLCD(data);
 228:	0e 94 53 00 	call	0xa6	; 0xa6 <shiftRegisterLCD>
	Write4bit(_8_BIT);
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
 234:	8f e3       	ldi	r24, 0x3F	; 63
 236:	9c e9       	ldi	r25, 0x9C	; 156
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd4Bit_Init+0x44>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd4Bit_Init+0x4a>
 23e:	00 00       	nop
	_delay_ms(10);

	Write4bit(_8_BIT);
 240:	88 e3       	ldi	r24, 0x38	; 56
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	93 e0       	ldi	r25, 0x03	; 3
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd4Bit_Init+0x58>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd4Bit_Init+0x5e>
 252:	00 00       	nop
	_delay_us(200);

	Write4bit(_8_BIT);
 254:	88 e3       	ldi	r24, 0x38	; 56
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
 25c:	8f e1       	ldi	r24, 0x1F	; 31
 25e:	93 e0       	ldi	r25, 0x03	; 3
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd4Bit_Init+0x6c>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd4Bit_Init+0x72>
 266:	00 00       	nop
	_delay_us(200);
	
	Write4bit(_4_BIT);
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 6d 00 	call	0xda	; 0xda <Write4bit>
 270:	8f e3       	ldi	r24, 0x3F	; 63
 272:	91 e0       	ldi	r25, 0x01	; 1
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <lcd4Bit_Init+0x80>
 278:	00 c0       	rjmp	.+0      	; 0x27a <lcd4Bit_Init+0x86>
 27a:	00 00       	nop
	_delay_us(80);
	
	lcd4BitIns(_4_BIT);
 27c:	88 e2       	ldi	r24, 0x28	; 40
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd4BitIns>
 284:	8f e3       	ldi	r24, 0x3F	; 63
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd4Bit_Init+0x94>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <lcd4Bit_Init+0x9a>
 28e:	00 00       	nop
	_delay_us(80);
	
	lcd4BitIns(LCD_CLEAR);
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd4BitIns>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	8f e7       	ldi	r24, 0x7F	; 127
 29a:	9e e3       	ldi	r25, 0x3E	; 62
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd4Bit_Init+0xa8>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd4Bit_Init+0xae>
 2a2:	00 00       	nop
	_delay_ms(4);
		
	lcd4BitIns(LINE_ONE);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd4BitIns>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	8f e3       	ldi	r24, 0x3F	; 63
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd4Bit_Init+0xbc>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd4Bit_Init+0xc2>
 2b6:	00 00       	nop
	_delay_us(80);

	lcd4BitIns(DISPLAY);
 2b8:	8c e0       	ldi	r24, 0x0C	; 12
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd4BitIns>
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd4Bit_Init+0xd0>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd4Bit_Init+0xd6>
 2ca:	00 00       	nop
 2cc:	08 95       	ret

000002ce <row>:
#include "RTC.h"
#include "lcd.h"


void row(int data){
	PORTD &= ~(1 << PORTD4);
 2ce:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1 << PORTD5);
 2d0:	5d 98       	cbi	0x0b, 5	; 11
	for(int i = 7; i >= 0; i --){
 2d2:	27 e0       	ldi	r18, 0x07	; 7
 2d4:	30 e0       	ldi	r19, 0x00	; 0
		if( data & (1 << i)){
 2d6:	ac 01       	movw	r20, r24
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <row+0x12>
 2dc:	55 95       	asr	r21
 2de:	47 95       	ror	r20
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <row+0xe>
 2e4:	40 ff       	sbrs	r20, 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <row+0x1e>
			PORTD |= (1 << PORTD3);
 2e8:	5b 9a       	sbi	0x0b, 3	; 11
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <row+0x20>
			}else{
			PORTD &= ~(1 << PORTD3);
 2ec:	5b 98       	cbi	0x0b, 3	; 11
			 		
		}

		PORTD |= (1 << PORTD5);
 2ee:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &= ~(1 << PORTD5);
 2f0:	5d 98       	cbi	0x0b, 5	; 11


void row(int data){
	PORTD &= ~(1 << PORTD4);
	PORTD &= ~(1 << PORTD5);
	for(int i = 7; i >= 0; i --){
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	31 09       	sbc	r19, r1
 2f6:	78 f7       	brcc	.-34     	; 0x2d6 <row+0x8>
		}

		PORTD |= (1 << PORTD5);
		PORTD &= ~(1 << PORTD5);
	}
	PORTD |= (1 << PORTD4);
 2f8:	5c 9a       	sbi	0x0b, 4	; 11
 2fa:	08 95       	ret

000002fc <column>:
}

void column(int data){
	PORTD &= ~(1 << PORTD1);
 2fc:	59 98       	cbi	0x0b, 1	; 11
	PORTD &= ~(1 << PORTD2);
 2fe:	5a 98       	cbi	0x0b, 2	; 11
	for(int i = 7; i >= 0; i --){
 300:	27 e0       	ldi	r18, 0x07	; 7
 302:	30 e0       	ldi	r19, 0x00	; 0
		if( data & (1 << i)){
 304:	ac 01       	movw	r20, r24
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <column+0x12>
 30a:	55 95       	asr	r21
 30c:	47 95       	ror	r20
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <column+0xe>
 312:	40 ff       	sbrs	r20, 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <column+0x1e>
			PORTD |= (1 << PORTD0);
 316:	58 9a       	sbi	0x0b, 0	; 11
 318:	01 c0       	rjmp	.+2      	; 0x31c <column+0x20>
			}else{
			PORTD &= ~(1 << PORTD0);
 31a:	58 98       	cbi	0x0b, 0	; 11
				
		}

		PORTD |= (1 << PORTD2);
 31c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1 << PORTD2);
 31e:	5a 98       	cbi	0x0b, 2	; 11
}

void column(int data){
	PORTD &= ~(1 << PORTD1);
	PORTD &= ~(1 << PORTD2);
	for(int i = 7; i >= 0; i --){
 320:	21 50       	subi	r18, 0x01	; 1
 322:	31 09       	sbc	r19, r1
 324:	78 f7       	brcc	.-34     	; 0x304 <column+0x8>
		}

		PORTD |= (1 << PORTD2);
		PORTD &= ~(1 << PORTD2);
	}
	PORTD |= (1 << PORTD1);
 326:	59 9a       	sbi	0x0b, 1	; 11
 328:	08 95       	ret

0000032a <displayMenna>:
		0B10100001,
		0B10011110
	}};
	

void displayMenna(){
 32a:	2f 92       	push	r2
 32c:	3f 92       	push	r3
 32e:	4f 92       	push	r4
 330:	5f 92       	push	r5
 332:	6f 92       	push	r6
 334:	7f 92       	push	r7
 336:	8f 92       	push	r8
 338:	9f 92       	push	r9
 33a:	af 92       	push	r10
 33c:	bf 92       	push	r11
 33e:	cf 92       	push	r12
 340:	df 92       	push	r13
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	0f 93       	push	r16
 348:	1f 93       	push	r17
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <displayMenna+0x26>
 350:	00 d0       	rcall	.+0      	; 0x352 <displayMenna+0x28>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
	int x = 0;
	int time =1000;
	for(int an = 0; an < 4;){
 356:	1a 82       	std	Y+2, r1	; 0x02
 358:	19 82       	std	Y+1, r1	; 0x01
		0B10011110
	}};
	

void displayMenna(){
	int x = 0;
 35a:	e1 2c       	mov	r14, r1
 35c:	f1 2c       	mov	r15, r1
					
		for (int y = 0; y < 25; y ++)
		{
			for(int i = 0; i < 8; i++){
				column(Menna[an][i] << x | Menna[1+an][i] >> (8 - x));
				row(1 << i);
 35e:	cc 24       	eor	r12, r12
 360:	c3 94       	inc	r12
 362:	d1 2c       	mov	r13, r1
 364:	44 c0       	rjmp	.+136    	; 0x3ee <displayMenna+0xc4>
	for(int an = 0; an < 4;){
					
		for (int y = 0; y < 25; y ++)
		{
			for(int i = 0; i < 8; i++){
				column(Menna[an][i] << x | Menna[1+an][i] >> (8 - x));
 366:	f4 01       	movw	r30, r8
 368:	21 91       	ld	r18, Z+
 36a:	31 91       	ld	r19, Z+
 36c:	4f 01       	movw	r8, r30
 36e:	46 8d       	ldd	r20, Z+30	; 0x1e
 370:	57 8d       	ldd	r21, Z+31	; 0x1f
 372:	06 2c       	mov	r0, r6
 374:	02 c0       	rjmp	.+4      	; 0x37a <displayMenna+0x50>
 376:	55 95       	asr	r21
 378:	47 95       	ror	r20
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <displayMenna+0x4c>
 37e:	c9 01       	movw	r24, r18
 380:	0e 2c       	mov	r0, r14
 382:	02 c0       	rjmp	.+4      	; 0x388 <displayMenna+0x5e>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	0a 94       	dec	r0
 38a:	e2 f7       	brpl	.-8      	; 0x384 <displayMenna+0x5a>
 38c:	84 2b       	or	r24, r20
 38e:	95 2b       	or	r25, r21
 390:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
				row(1 << i);
 394:	c6 01       	movw	r24, r12
 396:	0b 80       	ldd	r0, Y+3	; 0x03
 398:	02 c0       	rjmp	.+4      	; 0x39e <displayMenna+0x74>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	0a 94       	dec	r0
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <displayMenna+0x70>
 3a2:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 3a6:	8f e9       	ldi	r24, 0x9F	; 159
 3a8:	9f e0       	ldi	r25, 0x0F	; 15
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <displayMenna+0x80>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <displayMenna+0x86>
 3b0:	00 00       	nop
	int time =1000;
	for(int an = 0; an < 4;){
					
		for (int y = 0; y < 25; y ++)
		{
			for(int i = 0; i < 8; i++){
 3b2:	eb 81       	ldd	r30, Y+3	; 0x03
 3b4:	fc 81       	ldd	r31, Y+4	; 0x04
 3b6:	31 96       	adiw	r30, 0x01	; 1
 3b8:	fc 83       	std	Y+4, r31	; 0x04
 3ba:	eb 83       	std	Y+3, r30	; 0x03
 3bc:	38 97       	sbiw	r30, 0x08	; 8
 3be:	99 f6       	brne	.-90     	; 0x366 <displayMenna+0x3c>
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	af 1a       	sub	r10, r31
 3c4:	b1 08       	sbc	r11, r1
void displayMenna(){
	int x = 0;
	int time =1000;
	for(int an = 0; an < 4;){
					
		for (int y = 0; y < 25; y ++)
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <displayMenna+0xa6>
		0B10100001,
		0B10011110
	}};
	

void displayMenna(){
 3c8:	42 01       	movw	r8, r4
 3ca:	1c 82       	std	Y+4, r1	; 0x04
 3cc:	1b 82       	std	Y+3, r1	; 0x03
 3ce:	cb cf       	rjmp	.-106    	; 0x366 <displayMenna+0x3c>
				column(Menna[an][i] << x | Menna[1+an][i] >> (8 - x));
				row(1 << i);
				_delay_us(time);
			}
		}
		x++;
 3d0:	2f ef       	ldi	r18, 0xFF	; 255
 3d2:	e2 1a       	sub	r14, r18
 3d4:	f2 0a       	sbc	r15, r18
		if(x > 8){
 3d6:	39 e0       	ldi	r19, 0x09	; 9
 3d8:	e3 16       	cp	r14, r19
 3da:	f1 04       	cpc	r15, r1
 3dc:	24 f0       	brlt	.+8      	; 0x3e6 <displayMenna+0xbc>
			x = 0;
			an ++;
 3de:	09 83       	std	Y+1, r16	; 0x01
 3e0:	1a 83       	std	Y+2, r17	; 0x02
				_delay_us(time);
			}
		}
		x++;
		if(x > 8){
			x = 0;
 3e2:	e1 2c       	mov	r14, r1
 3e4:	f1 2c       	mov	r15, r1
	

void displayMenna(){
	int x = 0;
	int time =1000;
	for(int an = 0; an < 4;){
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	04 97       	sbiw	r24, 0x04	; 4
 3ec:	f4 f4       	brge	.+60     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3ee:	89 81       	ldd	r24, Y+1	; 0x01
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	82 95       	swap	r24
 3f8:	92 95       	swap	r25
 3fa:	90 7f       	andi	r25, 0xF0	; 240
 3fc:	98 27       	eor	r25, r24
 3fe:	80 7f       	andi	r24, 0xF0	; 240
 400:	98 27       	eor	r25, r24
 402:	fc 01       	movw	r30, r24
 404:	e0 50       	subi	r30, 0x00	; 0
 406:	ff 4f       	sbci	r31, 0xFF	; 255
 408:	2f 01       	movw	r4, r30
		0B10100001,
		0B10011110
	}};
	

void displayMenna(){
 40a:	0f 2e       	mov	r0, r31
 40c:	f9 e1       	ldi	r31, 0x19	; 25
 40e:	af 2e       	mov	r10, r31
 410:	b1 2c       	mov	r11, r1
 412:	f0 2d       	mov	r31, r0
	for(int an = 0; an < 4;){
					
		for (int y = 0; y < 25; y ++)
		{
			for(int i = 0; i < 8; i++){
				column(Menna[an][i] << x | Menna[1+an][i] >> (8 - x));
 414:	68 94       	set
 416:	66 24       	eor	r6, r6
 418:	63 f8       	bld	r6, 3
 41a:	71 2c       	mov	r7, r1
 41c:	6e 18       	sub	r6, r14
 41e:	7f 08       	sbc	r7, r15
 420:	09 81       	ldd	r16, Y+1	; 0x01
 422:	1a 81       	ldd	r17, Y+2	; 0x02
 424:	0f 5f       	subi	r16, 0xFF	; 255
 426:	1f 4f       	sbci	r17, 0xFF	; 255
 428:	cf cf       	rjmp	.-98     	; 0x3c8 <displayMenna+0x9e>
		if(x > 8){
			x = 0;
			an ++;
		}
	}
}
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	9f 90       	pop	r9
 448:	8f 90       	pop	r8
 44a:	7f 90       	pop	r7
 44c:	6f 90       	pop	r6
 44e:	5f 90       	pop	r5
 450:	4f 90       	pop	r4
 452:	3f 90       	pop	r3
 454:	2f 90       	pop	r2
 456:	08 95       	ret

00000458 <main>:


int main(void)
{ 
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	60 97       	sbiw	r28, 0x10	; 16
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
	RTC data;
	RTC_Init();
 46c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <RTC_Init>
	lcd4Bit_Init();
 470:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd4Bit_Init>
	DDRD = 0xff;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	8a b9       	out	0x0a, r24	; 10
	int counter = 1,start = 1;
 478:	ee 24       	eor	r14, r14
 47a:	e3 94       	inc	r14
 47c:	f1 2c       	mov	r15, r1
 47e:	cc 24       	eor	r12, r12
 480:	c3 94       	inc	r12
 482:	d1 2c       	mov	r13, r1


			RTC_ReadDataTime(&data);
			
			column(0x80);
			row(data.hour/10);
 484:	0a e0       	ldi	r16, 0x0A	; 10
 486:	10 e0       	ldi	r17, 0x00	; 0
 488:	02 c0       	rjmp	.+4      	; 0x48e <main+0x36>
 48a:	e1 2c       	mov	r14, r1
 48c:	f1 2c       	mov	r15, r1
*/
	while(1){



			RTC_ReadDataTime(&data);
 48e:	ce 01       	movw	r24, r28
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	0e 94 1f 03 	call	0x63e	; 0x63e <RTC_ReadDataTime>
			
			column(0x80);
 496:	80 e8       	ldi	r24, 0x80	; 128
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.hour/10);
 49e:	8f 81       	ldd	r24, Y+7	; 0x07
 4a0:	98 85       	ldd	r25, Y+8	; 0x08
 4a2:	b8 01       	movw	r22, r16
 4a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 4a8:	cb 01       	movw	r24, r22
 4aa:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ae:	8f e3       	ldi	r24, 0x3F	; 63
 4b0:	9f e1       	ldi	r25, 0x1F	; 31
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <main+0x5a>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <main+0x60>
 4b8:	00 00       	nop
			_delay_ms(2);
			column(0x40);
 4ba:	80 e4       	ldi	r24, 0x40	; 64
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.hour%10);
 4c2:	8f 81       	ldd	r24, Y+7	; 0x07
 4c4:	98 85       	ldd	r25, Y+8	; 0x08
 4c6:	b8 01       	movw	r22, r16
 4c8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 4cc:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 4d0:	8f e3       	ldi	r24, 0x3F	; 63
 4d2:	9f e1       	ldi	r25, 0x1F	; 31
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0x7c>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0x82>
 4da:	00 00       	nop
			_delay_ms(2);

			column(0);
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(0);
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>

			column(0x10);
 4ec:	80 e1       	ldi	r24, 0x10	; 16
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.min/10);
 4f4:	8d 81       	ldd	r24, Y+5	; 0x05
 4f6:	9e 81       	ldd	r25, Y+6	; 0x06
 4f8:	b8 01       	movw	r22, r16
 4fa:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 4fe:	cb 01       	movw	r24, r22
 500:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	9f e1       	ldi	r25, 0x1F	; 31
 508:	01 97       	sbiw	r24, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <main+0xb0>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <main+0xb6>
 50e:	00 00       	nop
			_delay_ms(2);
			column(0x08);
 510:	88 e0       	ldi	r24, 0x08	; 8
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.min%10);
 518:	8d 81       	ldd	r24, Y+5	; 0x05
 51a:	9e 81       	ldd	r25, Y+6	; 0x06
 51c:	b8 01       	movw	r22, r16
 51e:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 522:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 526:	8f e3       	ldi	r24, 0x3F	; 63
 528:	9f e1       	ldi	r25, 0x1F	; 31
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <main+0xd2>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0xd8>
 530:	00 00       	nop
			_delay_ms(2);

			column(0);
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(0);
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
			
			column(0x02);
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.sec/10);
 54a:	8b 81       	ldd	r24, Y+3	; 0x03
 54c:	9c 81       	ldd	r25, Y+4	; 0x04
 54e:	b8 01       	movw	r22, r16
 550:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 554:	cb 01       	movw	r24, r22
 556:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 55a:	8f e3       	ldi	r24, 0x3F	; 63
 55c:	9f e1       	ldi	r25, 0x1F	; 31
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <main+0x106>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x10c>
 564:	00 00       	nop
			_delay_ms(2);
			column(0x01);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(data.sec%10);
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	9c 81       	ldd	r25, Y+4	; 0x04
 572:	b8 01       	movw	r22, r16
 574:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <__divmodhi4>
 578:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
 57c:	8f e3       	ldi	r24, 0x3F	; 63
 57e:	9f e1       	ldi	r25, 0x1F	; 31
 580:	01 97       	sbiw	r24, 0x01	; 1
 582:	f1 f7       	brne	.-4      	; 0x580 <main+0x128>
 584:	00 c0       	rjmp	.+0      	; 0x586 <main+0x12e>
 586:	00 00       	nop
			_delay_ms(2);

			column(0);
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <column>
			row(0);
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 67 01 	call	0x2ce	; 0x2ce <row>
			if((data.hour == 11 && data.min == 28 && counter != 0) || start){
 598:	8f 81       	ldd	r24, Y+7	; 0x07
 59a:	98 85       	ldd	r25, Y+8	; 0x08
 59c:	0b 97       	sbiw	r24, 0x0b	; 11
 59e:	61 f4       	brne	.+24     	; 0x5b8 <main+0x160>
 5a0:	8d 81       	ldd	r24, Y+5	; 0x05
 5a2:	9e 81       	ldd	r25, Y+6	; 0x06
 5a4:	4c 97       	sbiw	r24, 0x1c	; 28
 5a6:	59 f4       	brne	.+22     	; 0x5be <main+0x166>
 5a8:	c1 14       	cp	r12, r1
 5aa:	d1 04       	cpc	r13, r1
 5ac:	71 f0       	breq	.+28     	; 0x5ca <main+0x172>
				displayMenna();
 5ae:	0e 94 95 01 	call	0x32a	; 0x32a <displayMenna>
				counter = 0;
 5b2:	c1 2c       	mov	r12, r1
 5b4:	d1 2c       	mov	r13, r1
				start = 0;
 5b6:	69 cf       	rjmp	.-302    	; 0x48a <main+0x32>
			row(data.sec%10);
			_delay_ms(2);

			column(0);
			row(0);
			if((data.hour == 11 && data.min == 28 && counter != 0) || start){
 5b8:	ef 28       	or	r14, r15
 5ba:	c9 f7       	brne	.-14     	; 0x5ae <main+0x156>
 5bc:	66 cf       	rjmp	.-308    	; 0x48a <main+0x32>
 5be:	ef 28       	or	r14, r15
 5c0:	b1 f7       	brne	.-20     	; 0x5ae <main+0x156>
				displayMenna();
				counter = 0;
				start = 0;
				}else if(data.hour == 11 && data.min != 28) {
				counter = 1;
 5c2:	cc 24       	eor	r12, r12
 5c4:	c3 94       	inc	r12
 5c6:	d1 2c       	mov	r13, r1
 5c8:	60 cf       	rjmp	.-320    	; 0x48a <main+0x32>
			row(data.sec%10);
			_delay_ms(2);

			column(0);
			row(0);
			if((data.hour == 11 && data.min == 28 && counter != 0) || start){
 5ca:	ef 28       	or	r14, r15
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <main+0x178>
 5ce:	5d cf       	rjmp	.-326    	; 0x48a <main+0x32>
 5d0:	ee cf       	rjmp	.-36     	; 0x5ae <main+0x156>

000005d2 <RTC_Init>:

#include "RTC.h"


void RTC_Init(){
	twi_Init();
 5d2:	0e 94 9d 03 	call	0x73a	; 0x73a <twi_Init>
	twiStart();
 5d6:	0e 94 a4 03 	call	0x748	; 0x748 <twiStart>
	twiWrite(RTC_WriteMode);
 5da:	80 ed       	ldi	r24, 0xD0	; 208
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	twiWrite(RTC_ControlReg);
 5e2:	87 e0       	ldi	r24, 0x07	; 7
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	twiWrite(0x00);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	twiStop();
 5f2:	0e 94 ad 03 	call	0x75a	; 0x75a <twiStop>
 5f6:	08 95       	ret

000005f8 <BCD_to_Decimal>:
int BCD_to_Decimal(int temp)//BCD to decimal
{
	int a,b,c;
	a=temp;
	b=0x00;
	if(a>=16)
 5f8:	80 31       	cpi	r24, 0x10	; 16
 5fa:	91 05       	cpc	r25, r1
 5fc:	fc f0       	brlt	.+62     	; 0x63c <BCD_to_Decimal+0x44>
 5fe:	9c 01       	movw	r18, r24
	{
		while(a>=16)
		{
			a=a-16;
 600:	20 51       	subi	r18, 0x10	; 16
 602:	31 09       	sbc	r19, r1
	int a,b,c;
	a=temp;
	b=0x00;
	if(a>=16)
	{
		while(a>=16)
 604:	20 31       	cpi	r18, 0x10	; 16
 606:	31 05       	cpc	r19, r1
 608:	dc f7       	brge	.-10     	; 0x600 <BCD_to_Decimal+0x8>
 60a:	40 97       	sbiw	r24, 0x10	; 16
 60c:	9c 01       	movw	r18, r24
 60e:	32 95       	swap	r19
 610:	22 95       	swap	r18
 612:	2f 70       	andi	r18, 0x0F	; 15
 614:	23 27       	eor	r18, r19
 616:	3f 70       	andi	r19, 0x0F	; 15
 618:	23 27       	eor	r18, r19
 61a:	8f 70       	andi	r24, 0x0F	; 15
 61c:	99 27       	eor	r25, r25
		{
			a=a-16;
			b=b+10;
			c=a+b;
 61e:	2f 5f       	subi	r18, 0xFF	; 255
 620:	3f 4f       	sbci	r19, 0xFF	; 255
 622:	a9 01       	movw	r20, r18
 624:	44 0f       	add	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	22 0f       	add	r18, r18
 62a:	33 1f       	adc	r19, r19
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	22 0f       	add	r18, r18
 632:	33 1f       	adc	r19, r19
 634:	24 0f       	add	r18, r20
 636:	35 1f       	adc	r19, r21
 638:	82 0f       	add	r24, r18
 63a:	93 1f       	adc	r25, r19
			temp=c;
		}
	}
	return temp;
}
 63c:	08 95       	ret

0000063e <RTC_ReadDataTime>:
	twiWriteRegister(RTC_WriteMode,RTC_DATA,Decimal_to_BCD(data -> date));
	twiWriteRegister(RTC_WriteMode,RTC_MONTH,Decimal_to_BCD(data -> month));
	twiWriteRegister(RTC_WriteMode,RTC_YEAR,Decimal_to_BCD(data -> year));
	
}
void RTC_ReadDataTime(RTC * data){
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	ec 01       	movw	r28, r24
	
	data -> sec = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_SEC));
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	61 ed       	ldi	r22, 0xD1	; 209
 64a:	70 e0       	ldi	r23, 0x00	; 0
 64c:	80 ed       	ldi	r24, 0xD0	; 208
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 654:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 658:	9b 83       	std	Y+3, r25	; 0x03
 65a:	8a 83       	std	Y+2, r24	; 0x02
	data -> min = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_MIN));
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	61 ed       	ldi	r22, 0xD1	; 209
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	80 ed       	ldi	r24, 0xD0	; 208
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 66c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 670:	9d 83       	std	Y+5, r25	; 0x05
 672:	8c 83       	std	Y+4, r24	; 0x04
	if(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_HOUR) & 0x40){
 674:	42 e0       	ldi	r20, 0x02	; 2
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	61 ed       	ldi	r22, 0xD1	; 209
 67a:	70 e0       	ldi	r23, 0x00	; 0
 67c:	80 ed       	ldi	r24, 0xD0	; 208
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 684:	86 ff       	sbrs	r24, 6
 686:	19 c0       	rjmp	.+50     	; 0x6ba <RTC_ReadDataTime+0x7c>
		data->Mode12_24 = 1;
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	89 83       	std	Y+1, r24	; 0x01
		data -> hour = twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_HOUR);
 68c:	42 e0       	ldi	r20, 0x02	; 2
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	61 ed       	ldi	r22, 0xD1	; 209
 692:	70 e0       	ldi	r23, 0x00	; 0
 694:	80 ed       	ldi	r24, 0xD0	; 208
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 69c:	9f 83       	std	Y+7, r25	; 0x07
 69e:	8e 83       	std	Y+6, r24	; 0x06
		if((data -> hour) & 0x20){
 6a0:	85 ff       	sbrs	r24, 5
 6a2:	03 c0       	rjmp	.+6      	; 0x6aa <RTC_ReadDataTime+0x6c>
			data -> AmPm = 1;
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	28 83       	st	Y, r18
 6a8:	01 c0       	rjmp	.+2      	; 0x6ac <RTC_ReadDataTime+0x6e>
		}else{
			data -> AmPm = 0;
 6aa:	18 82       	st	Y, r1
		}
		data -> hour = BCD_to_Decimal((data -> hour)& 0x1f);
 6ac:	8f 71       	andi	r24, 0x1F	; 31
 6ae:	99 27       	eor	r25, r25
 6b0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 6b4:	9f 83       	std	Y+7, r25	; 0x07
 6b6:	8e 83       	std	Y+6, r24	; 0x06
 6b8:	0d c0       	rjmp	.+26     	; 0x6d4 <RTC_ReadDataTime+0x96>
	}else{
		data->Mode12_24 = 0;
 6ba:	19 82       	std	Y+1, r1	; 0x01
		data -> hour = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_HOUR));		
 6bc:	42 e0       	ldi	r20, 0x02	; 2
 6be:	50 e0       	ldi	r21, 0x00	; 0
 6c0:	61 ed       	ldi	r22, 0xD1	; 209
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	80 ed       	ldi	r24, 0xD0	; 208
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 6cc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 6d0:	9f 83       	std	Y+7, r25	; 0x07
 6d2:	8e 83       	std	Y+6, r24	; 0x06
	}
	data -> weekDay = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_DAY));
 6d4:	43 e0       	ldi	r20, 0x03	; 3
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	61 ed       	ldi	r22, 0xD1	; 209
 6da:	70 e0       	ldi	r23, 0x00	; 0
 6dc:	80 ed       	ldi	r24, 0xD0	; 208
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 6e4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 6e8:	99 87       	std	Y+9, r25	; 0x09
 6ea:	88 87       	std	Y+8, r24	; 0x08
	data -> date = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_DATA));
 6ec:	44 e0       	ldi	r20, 0x04	; 4
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	61 ed       	ldi	r22, 0xD1	; 209
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	80 ed       	ldi	r24, 0xD0	; 208
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 6fc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 700:	9b 87       	std	Y+11, r25	; 0x0b
 702:	8a 87       	std	Y+10, r24	; 0x0a
	data -> month = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_MONTH));
 704:	45 e0       	ldi	r20, 0x05	; 5
 706:	50 e0       	ldi	r21, 0x00	; 0
 708:	61 ed       	ldi	r22, 0xD1	; 209
 70a:	70 e0       	ldi	r23, 0x00	; 0
 70c:	80 ed       	ldi	r24, 0xD0	; 208
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 714:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 718:	9d 87       	std	Y+13, r25	; 0x0d
 71a:	8c 87       	std	Y+12, r24	; 0x0c
	data -> year = BCD_to_Decimal(twiReadRegister(RTC_WriteMode,RTC_ReadMode,RTC_YEAR));
 71c:	46 e0       	ldi	r20, 0x06	; 6
 71e:	50 e0       	ldi	r21, 0x00	; 0
 720:	61 ed       	ldi	r22, 0xD1	; 209
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 ed       	ldi	r24, 0xD0	; 208
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 c8 03 	call	0x790	; 0x790 <twiReadRegister>
 72c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <BCD_to_Decimal>
 730:	9f 87       	std	Y+15, r25	; 0x0f
 732:	8e 87       	std	Y+14, r24	; 0x0e

}
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	08 95       	ret

0000073a <twi_Init>:
 */ 

#include "TWI.h"

void twi_Init(){
	DDRC = 0x00; 
 73a:	17 b8       	out	0x07, r1	; 7
	TWSR = 0x00;
 73c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	TWBR = 0x48;
 740:	88 e4       	ldi	r24, 0x48	; 72
 742:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 746:	08 95       	ret

00000748 <twiStart>:
}

void twiStart(){
	TWCR = (1 << TWINT) |(1 << TWSTA)|(1 << TWEN); 
 748:	84 ea       	ldi	r24, 0xA4	; 164
 74a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1 << TWINT)));
 74e:	ec eb       	ldi	r30, 0xBC	; 188
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	88 23       	and	r24, r24
 756:	ec f7       	brge	.-6      	; 0x752 <twiStart+0xa>
}
 758:	08 95       	ret

0000075a <twiStop>:

void twiStop(){
	TWCR = (1 << TWINT) |(1 << TWSTO)|(1 << TWEN); 
 75a:	84 e9       	ldi	r24, 0x94	; 148
 75c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 760:	08 95       	ret

00000762 <twiWrite>:
}

void twiWrite(int data){
	TWDR = data;
 762:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1 << TWINT) | (1 << TWEN);
 766:	84 e8       	ldi	r24, 0x84	; 132
 768:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)));
 76c:	ec eb       	ldi	r30, 0xBC	; 188
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	80 81       	ld	r24, Z
 772:	88 23       	and	r24, r24
 774:	ec f7       	brge	.-6      	; 0x770 <twiWrite+0xe>
	
}
 776:	08 95       	ret

00000778 <twiRead>:
int twiRead(){
	TWCR = (1 << TWINT) | (1 << TWEN);
 778:	84 e8       	ldi	r24, 0x84	; 132
 77a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1 << TWINT)));
 77e:	ec eb       	ldi	r30, 0xBC	; 188
 780:	f0 e0       	ldi	r31, 0x00	; 0
 782:	80 81       	ld	r24, Z
 784:	88 23       	and	r24, r24
 786:	ec f7       	brge	.-6      	; 0x782 <twiRead+0xa>
	return TWDR;
 788:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	08 95       	ret

00000790 <twiReadRegister>:
int twiReadRegister(int address, int address2 ,int reg){
 790:	ef 92       	push	r14
 792:	ff 92       	push	r15
 794:	0f 93       	push	r16
 796:	1f 93       	push	r17
 798:	cf 93       	push	r28
 79a:	df 93       	push	r29
 79c:	7c 01       	movw	r14, r24
 79e:	eb 01       	movw	r28, r22
 7a0:	8a 01       	movw	r16, r20
	int data;
	twiStart();
 7a2:	0e 94 a4 03 	call	0x748	; 0x748 <twiStart>
	twiWrite(address);
 7a6:	c7 01       	movw	r24, r14
 7a8:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	twiWrite(reg);
 7ac:	c8 01       	movw	r24, r16
 7ae:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	twiStart();
 7b2:	0e 94 a4 03 	call	0x748	; 0x748 <twiStart>
	twiWrite(address2);
 7b6:	ce 01       	movw	r24, r28
 7b8:	0e 94 b1 03 	call	0x762	; 0x762 <twiWrite>
	data = twiRead();
 7bc:	0e 94 bc 03 	call	0x778	; 0x778 <twiRead>
	TWCR = (1 << TWINT) |(1 << TWSTA)|(1 << TWEN); 
	while(!(TWCR & (1 << TWINT)));
}

void twiStop(){
	TWCR = (1 << TWINT) |(1 << TWSTO)|(1 << TWEN); 
 7c0:	24 e9       	ldi	r18, 0x94	; 148
 7c2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	twiStart();
	twiWrite(address2);
	data = twiRead();
	twiStop();
	return data;
}
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	08 95       	ret

000007d4 <__divmodhi4>:
 7d4:	97 fb       	bst	r25, 7
 7d6:	07 2e       	mov	r0, r23
 7d8:	16 f4       	brtc	.+4      	; 0x7de <__divmodhi4+0xa>
 7da:	00 94       	com	r0
 7dc:	07 d0       	rcall	.+14     	; 0x7ec <__divmodhi4_neg1>
 7de:	77 fd       	sbrc	r23, 7
 7e0:	09 d0       	rcall	.+18     	; 0x7f4 <__divmodhi4_neg2>
 7e2:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__udivmodhi4>
 7e6:	07 fc       	sbrc	r0, 7
 7e8:	05 d0       	rcall	.+10     	; 0x7f4 <__divmodhi4_neg2>
 7ea:	3e f4       	brtc	.+14     	; 0x7fa <__divmodhi4_exit>

000007ec <__divmodhi4_neg1>:
 7ec:	90 95       	com	r25
 7ee:	81 95       	neg	r24
 7f0:	9f 4f       	sbci	r25, 0xFF	; 255
 7f2:	08 95       	ret

000007f4 <__divmodhi4_neg2>:
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255

000007fa <__divmodhi4_exit>:
 7fa:	08 95       	ret

000007fc <__udivmodhi4>:
 7fc:	aa 1b       	sub	r26, r26
 7fe:	bb 1b       	sub	r27, r27
 800:	51 e1       	ldi	r21, 0x11	; 17
 802:	07 c0       	rjmp	.+14     	; 0x812 <__udivmodhi4_ep>

00000804 <__udivmodhi4_loop>:
 804:	aa 1f       	adc	r26, r26
 806:	bb 1f       	adc	r27, r27
 808:	a6 17       	cp	r26, r22
 80a:	b7 07       	cpc	r27, r23
 80c:	10 f0       	brcs	.+4      	; 0x812 <__udivmodhi4_ep>
 80e:	a6 1b       	sub	r26, r22
 810:	b7 0b       	sbc	r27, r23

00000812 <__udivmodhi4_ep>:
 812:	88 1f       	adc	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	5a 95       	dec	r21
 818:	a9 f7       	brne	.-22     	; 0x804 <__udivmodhi4_loop>
 81a:	80 95       	com	r24
 81c:	90 95       	com	r25
 81e:	bc 01       	movw	r22, r24
 820:	cd 01       	movw	r24, r26
 822:	08 95       	ret

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
